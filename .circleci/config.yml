aliases:
  - &prepare_ssh_key
    name: Prepare SSH key
    command: |
      mkdir -p .ssh
      echo ${SSH_PRIV_KEY} | base64 --decode > .ssh/id_rsa
      chmod 0600 .ssh/id_rsa
  - &assume_dev_admin_role
    name: Assume Admin role on dev account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_DEV_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_DEV_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_DEV}:role/${AWS_ROLE_CI_ADMIN_DEV_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_DEFAULT_REGION=${AWS_REGION}" >> $BASH_ENV
  - &assume_preview_admin_role
    name: Assume role on Preview account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PREVIEW_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PREVIEW_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PREVIEW}:role/${AWS_ROLE_CI_ADMIN_PREVIEW_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &assume_preprod_admin_role
    name: Assume role on Preprod account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PREPROD_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PREPROD_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PREPROD}:role/${AWS_ROLE_CI_ADMIN_PREPROD_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &assume_prod_admin_role
    name: Assume role on Prod account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PROD_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PROD_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PROD}:role/${AWS_ROLE_CI_ADMIN_PROD_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &assume_integration_tests_role_dev_account
    name: Assume integration tests role on dev account
    command: |
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_DEV}:role/${AWS_ROLE_CI_INT_TESTS} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &test
    name: Test
    command: |
      docker build --build-arg NODE_BASE_IMAGE=${NODE_BASE_IMAGE} . -t event-subscriber:test-image --target dependencies --no-cache --pull
  - &install_sam_cli
    name: Install SAM CLI
    command: |
      git clone git://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
      pyenv update
      pyenv install 3.6.0
      pyenv global 3.6.0
      pip3 install aws-sam-cli==1.15.0 --user
      echo 'export PATH=$PATH:~/.local/bin' >>$BASH_ENV
      export PATH=$PATH:~/.local/bin
      sam --version
  - &build_integration_test_services
    name: Build integration test services
    command: |
      docker run \
        -v /tmp/integration-test:/host \
        -it event-subscriber:test-image \
        /bin/sh -l -c "cp -r dist /host && cp -r node_modules /host && cp template.yml /host && cp tests/fixtures/snsEvent.json /host"
      cd /tmp/integration-test
      sam local invoke --debug -e snsEvent.json
      cd -
  - &run_integration_tests
    name: Test integration
    command: |
      docker run \
        -e NOTIFICATIONS_BUCKET=$NOTIFICATIONS_BUCKET \
        -e AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} \
        -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
        -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        -it event-subscriber:test-image \
        /bin/sh -l -c "npm run test-integration-circle"
  - &ecr_login_dev
    name: ECR login Dev
    command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACC_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com
  - &ecr_login_preview
    name: ECR login Preview
    command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACC_ID_PREVIEW}.dkr.ecr.${AWS_REGION}.amazonaws.com
  - &ecr_login_preprod
    name: ECR login Preprod
    command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACC_ID_PREPROD}.dkr.ecr.${AWS_REGION}.amazonaws.com
  - &ecr_login_prod
    name: ECR login Production
    command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACC_ID_PROD}.dkr.ecr.${AWS_REGION}.amazonaws.com
  - &build_and_release
    name: Build and release
    command: |
      source $BASH_ENV
      mkdir /tmp/lambda
      docker build --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg NODE_BASE_IMAGE=${NODE_BASE_IMAGE} -t event-subscriber:${CIRCLE_SHA1} .
      docker run \
        -v /tmp/lambda:/host \
        -it event-subscriber:${CIRCLE_SHA1} \
        /bin/sh -l -c "cp ${CIRCLE_SHA1}.zip /host"
      aws s3 cp /tmp/lambda/${CIRCLE_SHA1}.zip s3://${DEV_BUCKET}
  - &push_dev_bucket
    name: Push dev bucket
    command: |
      mkdir /tmp/lambda
      aws s3 cp s3://${DEV_BUCKET}/${CIRCLE_SHA1}.zip /tmp/lambda
      mv /tmp/lambda/${CIRCLE_SHA1}.zip /tmp/lambda/${CIRCLE_TAG}.zip
      aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${DEV_BUCKET}
  - &push_preview_bucket
    name: Push preview bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PREVIEW_BUCKET}
  - &push_preprod_bucket
    name: Push preprod bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PREPROD_BUCKET}
  - &push_prod_bucket
    name: Push prod bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PROD_BUCKET}
  - &cleanup
    name: Cleanup
    command: |
      rm -rf .ssh
  - &release_to_int
    name: Clone street-manager-int repo
    command: |
      docker run \
        -e CIRCLE_SHA1=$CIRCLE_SHA1 \
        -e CLUSTER_NAME=$CLUSTER_NAME \
        -e NAMESPACE=$NAMESPACE \
        -e SSH_PRIV_KEY=$SSH_PRIV_KEY \
        -it alpine:latest \
        sh -l -c "
          mkdir -p ~/.ssh
          echo ${SSH_PRIV_KEY} | base64 -d > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
          export GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -F /dev/null'
          apk add git openssh-client jq curl
          curl -sLo /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/2.2.1/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          git config --global user.name ${GIT_CONFIG_USERNAME}
          git config --global user.email ${GIT_CONFIG_EMAIL}
          git clone git@github.com:departmentfortransport/street-manager-$NAMESPACE.git
          cd street-manager-$NAMESPACE
          /usr/local/bin/yq w -i config.yaml apps.event_subscriber.tag $CIRCLE_SHA1
          git diff --exit-code || true
          git commit -am \"Bumping event-subscriber version.\"
          git push -u origin
        "
version: 2.1
orbs:
  sam: circleci/aws-sam-serverless@2.0.0
jobs:
  build:
    machine:
      image: ubuntu-2004:202101-01
    executor: sam/default
    steps:
      - checkout
      - run: *prepare_ssh_key
      - run: *assume_dev_admin_role
      - run: *ecr_login_dev
      - run: *test
      - run: *assume_integration_tests_role_dev_account
      - run: *install_sam_cli
      - run: *build_integration_test_services
      - run: *run_integration_tests
  release:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run: *prepare_ssh_key
      - run: *assume_dev_admin_role
      - run: *ecr_login_dev
      - run: *build_and_release
      - run: *cleanup
  deployment:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      CLUSTER_NAME: dev-b.stwrks-dev.net
      NAMESPACE: int
    steps:
      - run: *prepare_ssh_key
      - run: *release_to_int
  tagged_build:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run: *assume_dev_admin_role
      - run: *ecr_login_dev
      - run: *push_dev_bucket
      - run: *assume_preview_admin_role
      - run: *ecr_login_preview
      - run: *push_preview_bucket
      - run: *assume_preprod_admin_role
      - run: *ecr_login_preprod
      - run: *push_preprod_bucket
      - run: *assume_prod_admin_role
      - run: *ecr_login_prod
      - run: *push_prod_bucket
workflows:
  coverage:
    jobs:
      - build
      - release:
          requires:
            - build
      - deployment:
          requires:
            - release
          filters:
            branches:
              only:
                - /^master$/
  tagged_build:
    jobs:
      - tagged_build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
